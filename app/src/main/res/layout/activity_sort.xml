<?xml version="1.0" encoding="utf-8"?>

<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="熟练掌握各内部排序算法（对内存中数据进行排序）的基本思想、具体过程以及实现算法；掌握各种排序算法时间复杂度的分析方法；理解排序方法“稳定”和“不稳定”的含义。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="排序算法大致可分为5类：插入类排序、分划类排序、选择类排序、归并类排序和基数排序。\n大部分排序算法主要由两个操作组成：比较元素关键字大小和移动元素。因此，本章通过计算排序过程中元素的比较次数与移动次数来分析各算法的效率，并计算个排序算法在最好、最坏和平均三中情况下的时间复杂度，比较各算法的性能"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="直接插入排序、简单选择排序和冒泡排序都是O(n^2)排序，不适用于处理数据规模较大的情况。对于元素个数较少的序列，直接插入排序效果很好。没有一种总是最好的排序方法，总体上来说，快速排序性能较好。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="插入类排序"
            android:textSize="24sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="插入类排序是将带排序元素朱哥插入到已排好序的有序表中，从而得到一个新的有序表。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:onClick="toLine"
            android:padding="10dp"
            android:text="直接插入排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="取第一个待排序元素构建一个有序序列，然后从第二个元素开始，一次将剩余元素插入到这个有序序列中，并保持插入后的序列有序。"
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:onClick="toHalf"
            android:padding="10dp"
            android:text="折半插入排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="直接插入排序中每一趟的两个基本操作（查找和插入）都是在有序表中进行，因此可以在比较元素关键字的过程中应用上一章介绍的折半查找算法来搜寻插入位置，减少元素关键字间的比较次数，提高插入效率。"
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="排序过程中的折半查找的目的是查询插入点，因此不论是否存在与待插入元素关键字相同的元素，结束查找过程的条件都是low＞high，并且在low指示的位置插入元素。"
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:onClick="toBlock"
            android:padding="10dp"
            android:text="2-路插入排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text=""
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:onClick="toBlock"
            android:padding="10dp"
            android:text="希尔排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text=""
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="分划类排序"
            android:textSize="24sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="分划类排序是通过一趟划分确定一个元素在序列中的位置，保证在它之前的一组元素不比它大，之后的不比它小，接着对两组元素继续分划，直至待排序列有序。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="冒泡排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="将待排序列（个数为n）中第一个和第二个元素的关键字进行比较，若为逆序，则将两元素互换；接着比较第二个和第三个元素的关键字，以此类推，直至最后两个元素的完成比较，这称为第一趟冒泡排序。第一趟排序分化出一组元素个数为n-1的待排序列和一个关键字最大的元素。第i趟对前n-i+1个元素进行类似的排序操作，得到一组元素个数为n-i的待排序列和一个关键字次大的元素。这样不断分划直至一趟分划时无元素互换为止。"
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="快速排序"
            android:onClick="toQuick"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="快速排序是对冒泡排序的一种改进。首先选第一个带排序元素作为枢轴（或称支点），根据枢轴将待排序列划分为两个子列，这两个子列必须满足以下条件：一个子列的元素关键字都不大于枢轴的关键字，另一个子列的元素关键字都不小于枢轴的关键字，接着对两个子列分别进行类似操作——选定枢轴并进行划分。这样不断划分直到所有子列仅包含0或1个元素位置。"
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="选择类排序"
            android:textSize="24sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="选择类排序是逐趟扫描未排序的部分，从中选取一个元素移动到合适的位置。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="简单选择排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text=""
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="树形选择排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text=""
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="堆排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text=""
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="归并类排序"
            android:textSize="24sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="归并类排序是一种采用分治策略的排序算法。所谓“归并”，就是将两个有序序列合并成为一个。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="2-路归并排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text=""
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="基数排序"
            android:textSize="24sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="基数排序不同于前面介绍的排序算法，它无须比较关键字，而是通过“分组”和“收集”两个过程来完成排序任务，其中借助了多关键字排序的思想。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="多关键字的排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text=""
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="基数排序"
            android:textSize="18sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text=""
            android:textSize="14sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="内部排序的比较"
            android:textSize="24sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="从平均性能而言，快速排序最佳，但最坏情况下不如堆排序和归并排序。堆排序在平均情况下使用的比较移动次数只比最坏情况下略少一些。归并排序所需的执行时间较堆排序节省，但需要较多的辅助空间。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="直接插入排序、简单插入排序、冒泡排序是O(n^2)的排序，不适合处理n较大的情况。当n＜=20或待排元素“基本有序”时，直接插入排序是最佳的排序算法，因此若n较大时，采用快速排序较好，但其中可以配合直接插入排序来对待排序元素个数较少的子序列。若n非常大且元素的关键字位数较少且可以分解时，采用基数排序较好。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="从算法稳定性来看，直接插入排序、冒泡排序和基数排序都是稳定的，而堆排序、快速排序、希尔排序和简单选择排序是不稳定的。在单关键字的排序中，所用的算法是否稳定无关紧要，但在多关键字的排序中需慎重考虑。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="从存储结构上看，若待排序元素是存放在顺序存储结构中，则排序过程中无法避免元素移动，因此当元素的规模较大时可以考虑采用静态链表，避免移动时大量时间耗费，大拿这种结构不适用于快速排序和堆排序。"
            android:textSize="14sp"
            android:textStyle="bold" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="10dp"
            android:text="选择排序要考虑的因素：（1）待排序的元素数目（2）关键字的结构及其初始状态（3）对稳定性的要求（4）语言工具的条件（5）存储结构（6）时间和辅助空间复杂度。"
            android:textSize="14sp"
            android:textStyle="bold" />
    </LinearLayout>
</ScrollView>